iterm_helpers="${HOME}/.iterm2_shell_integration.zsh"
[[ -f $iterm_helpers ]] && source "$iterm_helpers"

# Keep only the first occurrence of each duplicated value.
#  is the array version of PATH.
typeset -U PATH

# Load homebrew completions.
if command -v brew >/dev/null
then
	homebrew_path=$(brew --prefix)
	# Also load the completion goodies.
	site_functions="$homebrew_path/share/zsh/site-functions"
	if [[ -d $site_functions ]]
	then
		fpath=($fpath $site_functions)
		autoload -U $site_functions/*(:t)
	fi
fi

# This has higher priority and is installed by Homebrew, i.e. it needs to come after.
if command -v pyenv >/dev/null
then
	eval "$(pyenv init -)"
	command -v py >/dev/null && export PY_PYTHON=$(pyenv global | grep -o '[0-9]\+\.[0-9]\+')
	command -v pyenv-virtualenv-init >/dev/null && eval "$(pyenv virtualenv-init -)"
fi

[[ -f "$HOME/.config/broot/launcher/bash/br" ]] && source "$HOME/.config/broot/launcher/bash/br"

gr() {
	cd "$(git rev-parse --show-toplevel)"
}

source "$HOME/.zplug.zsh"

# https://www.chezmoi.io/
# chezmoi init --apply https://github.com/CmdQ/dotfiles.git
command -v chezmoi >/dev/null && eval "$(chezmoi completion zsh)"

for f in .zsh_local .aliases.bash .git_aliases.bash
do
	[[ -f $HOME/$f ]] && source "$HOME/$f"
done

[[ -d $HOME/.config/emacs/bin ]] && path+="$HOME/.config/emacs/bin"

# Case insensitive completion if that's the only that makes sense:
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[-_./]=* r:|=*'

# zsh parameter completion for the dotnet CLI
_dotnet () {
	local completions=("$(dotnet complete "$words")")

	# If the completion list is empty, just continue with filename selection
	if [ -z "$completions" ]
	then
		_arguments '*::arguments: _normal'
		return
	fi

	# This is not a variable assignment, don't remove spaces!
	_values = "${(ps:\n:)completions}"
}
command -v dotnet >/dev/null && compdef _dotnet dotnet

# This should do "expensive" work only once per day.
autoload -Uz compinit
for dump in "$HOME"/.zcompdump(N.mh+24); do
	compinit
done
compinit -C

make_aliases() {
	local grep=egrep
	command -v rg >/dev/null && grep='rg --smart-case'
	alias -g NUL="/dev/null"
	alias -g DN=">/dev/null"
	alias -g EN="2>/dev/null"
	alias -g AN="&>/dev/null"
	alias -g G="|$grep"
	alias -g IG="G -i"
	alias -g L="|less"
	alias -g GG="2>&1 |$grep"
	alias -g IGG="2>&1 IG"
	alias -g LL="2>&1 |less"
}
make_aliases

# A debug function that prints each argument that's passed on a new line.
debug_arguments() {
	printf '%s\n' "$@"
}

set -o emacs

autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

bindkey '^[[A' up-line-or-beginning-search
bindkey '^[[B' down-line-or-beginning-search
bindkey '^Q' push-line-or-edit

export SAVEHIST=999999
export HISTFILE="$HOME/.zsh_history"
export HISTORY_IGNORE="(ls|cd|pwd|exit|cd)*"
export HIST_STAMPS="yyyy-mm-dd"
setopt auto_cd
setopt extended_glob
setopt extended_history      # Write the history file in the ':start:elapsed;command' format.
setopt hist_expire_dups_first
setopt hist_find_no_dups
setopt hist_ignore_all_dups  # Delete an old recorded event if a new event is a duplicate.
setopt hist_ignore_dups      # Do not record an event that was just recorded again.
setopt hist_ignore_space     # Do not record an event starting with a space.
setopt hist_no_functions
setopt hist_no_store         # Don't store history commands
setopt hist_reduce_blanks    # Remove superfluous blanks from each command line being added to the history.
setopt hist_save_no_dups     # Do not write a duplicate event to the history file.
setopt hist_verify           # Do not execute immediately upon history expansion.
setopt inc_append_history    # Write to the history file immediately, not when the shell exits.
setopt interactive_comments
setopt nocasematch
setopt pushd_to_home
setopt share_history         # Share history between all sessions.
